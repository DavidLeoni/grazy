interface ForwardRendererInfo {
    far: number;
    id: number;
    shadowMappingUpdate: (camera: Camera, md: MathDevice) => void;
}
declare class ForwardRendering {
    static version: number;
    public passIndex: {
        fillZ: number;
        glow: number;
        ambient: number;
        shadow: number;
        diffuse: number;
        decal: number;
        transparent: number;
    };
    public md: MathDevice;
    public globalTechniqueParameters: TechniqueParameters;
    public ambientTechniqueParameters: TechniqueParameters;
    public numPasses: number;
    public passes: Pass[][];
    public lightingScale: number;
    public diffuseQueue: DrawParameters[];
    public numDiffuseQueue: number;
    public overlapQueryRenderables: Renderable[];
    public lightVisibleRenderables: Renderable[];
    static nextNodeID: number;
    public spotLights: LightInstance[];
    public pointLights: LightInstance[];
    public localDirectionalLights: LightInstance[];
    public globalDirectionalLights: Light[];
    public fogLights: LightInstance[];
    public worldView: any;
    public lightViewInverseProjection: any;
    public lightViewInverseTransposeFalloff: TechniqueParameterBuffer;
    public lightViewInverseTranspose: any;
    public lightFalloff: any;
    public v3Zero: any;
    public v4Zero: any;
    public v4One: any;
    public quadPrimitive: number;
    public quadSemantics: Semantics;
    public quadVertexBuffer: VertexBuffer;
    public defaultSkinBufferSize: number;
    public shadowMaps: ShadowMapping;
    public lightProjection: any;
    public defaultUpdateFn: (camera: Camera) => void;
    public defaultSkinnedUpdateFn: (camera: Camera) => void;
    public defaultPrepareFn: (geometryInstance: GeometryInstance) => void;
    public defaultShadowMappingUpdateFn: (camera: Camera) => void;
    public defaultShadowMappingSkinnedUpdateFn: (camera: Camera) => void;
    public loadTechniquesFn: (shaderManager: ShaderManager) => void;
    public zonlyShader: Shader;
    public zonlyRigidTechnique: Technique;
    public zonlySkinnedTechnique: Technique;
    public zonlyRigidAlphaTechnique: Technique;
    public zonlySkinnedAlphaTechnique: Technique;
    public zonlyRigidNoCullTechnique: Technique;
    public zonlySkinnedNoCullTechnique: Technique;
    public zonlyRigidAlphaNoCullTechnique: Technique;
    public zonlySkinnedAlphaNoCullTechnique: Technique;
    public stencilSetTechnique: Technique;
    public stencilClearTechnique: Technique;
    public stencilSetSpotLightTechnique: Technique;
    public stencilClearSpotLightTechnique: Technique;
    public forwardShader: Shader;
    public skyboxTechnique: Technique;
    public ambientRigidTechnique: Technique;
    public ambientSkinnedTechnique: Technique;
    public ambientRigidAlphaTechnique: Technique;
    public ambientSkinnedAlphaTechnique: Technique;
    public ambientFlatRigidTechnique: Technique;
    public ambientFlatRigidNoCullTechnique: Technique;
    public ambientFlatSkinnedTechnique: Technique;
    public ambientGlowmapRigidTechnique: Technique;
    public ambientGlowmapSkinnedTechnique: Technique;
    public ambientLightmapRigidTechnique: Technique;
    public glowmapRigidTechnique: Technique;
    public glowmapSkinnedTechnique: Technique;
    public lightmapRigidTechnique: Technique;
    public visibleRenderables: Renderable[];
    public camera: Camera;
    public globalCameraMatrix: any;
    public sceneExtents: any;
    public ambientColor: any;
    public identityUVTransform: any;
    public finalRenderTarget: RenderTarget;
    public finalTexture: Texture;
    public depthBuffer: RenderBuffer;
    public bufferWidth: number;
    public bufferHeight: number;
    public updateShader(shaderManager): void;
    static createNodeRendererInfo(node, md): void;
    public createRendererInfo(renderable): ForwardRendererInfo;
    public prepareRenderables(camera, scene): void;
    public prepareLights(gd, scene): void;
    public addToDiffuseQueue(gd, renderableDrawParameters, lightInstanceTechniqueParameters): void;
    public lightFindVisibleRenderables(gd, lightInstance, scene): boolean;
    public directionalLightsUpdateVisibleRenderables(gd): boolean;
    public update(gd, camera, scene, currentTime): void;
    public forceRenderInfoUpdate(scene): void;
    public destroyBuffers(): void;
    public updateBuffers(gd, deviceWidth, deviceHeight): boolean;
    public drawAmbientPass(gd, ambientColor): void;
    public drawShadowMaps(gd, globalTechniqueParameters, lightInstances, shadowMaps, minExtentsHigh): void;
    public draw(gd, clearColor, drawDecalsFn, drawTransparentFn, drawDebugFn, postFXsetupFn): void;
    public setLightingScale(scale): void;
    public getDefaultSkinBufferSize(): number;
    public destroy(): void;
    static create(gd: GraphicsDevice, md: MathDevice, shaderManager: ShaderManager, effectManager: EffectManager, settings): ForwardRendering;
}
